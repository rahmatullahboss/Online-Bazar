/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-vercel-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum_users_delivery_zone = pgEnum('enum_users_delivery_zone', [
  'inside_dhaka',
  'outside_dhaka',
])
export const enum_users_role = pgEnum('enum_users_role', ['admin', 'user'])
export const enum_orders_device_type = pgEnum('enum_orders_device_type', [
  'mobile',
  'desktop',
  'tablet',
  'other',
])
export const enum_orders_payment_method = pgEnum('enum_orders_payment_method', [
  'cod',
  'bkash',
  'nagad',
])
export const enum_orders_status = pgEnum('enum_orders_status', [
  'pending',
  'processing',
  'shipped',
  'completed',
  'cancelled',
  'refunded',
])
export const enum_orders_delivery_zone = pgEnum('enum_orders_delivery_zone', [
  'inside_dhaka',
  'outside_dhaka',
])
export const enum_abandoned_carts_status = pgEnum('enum_abandoned_carts_status', [
  'active',
  'abandoned',
  'recovered',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum_coupons_discount_type = pgEnum('enum_coupons_discount_type', ['percent', 'fixed'])
export const enum_coupons_applicable_to = pgEnum('enum_coupons_applicable_to', [
  'all',
  'first_order',
])

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    customerNumber: varchar('customer_number'),
    deliveryZone: enum_users_delivery_zone('delivery_zone').notNull().default('inside_dhaka'),
    role: enum_users_role('role').notNull().default('user'),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    address_line1: varchar('address_line1'),
    address_line2: varchar('address_line2'),
    address_city: varchar('address_city'),
    address_state: varchar('address_state'),
    address_postalCode: varchar('address_postal_code'),
    address_country: varchar('address_country'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    prefix: varchar('prefix').default('uploads'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const items = pgTable(
  'items',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    shortDescription: varchar('short_description'),
    description: varchar('description').notNull(),
    price: numeric('price').notNull(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imageUrl: varchar('image_url'),
    available: boolean('available').default(true),
    category: integer('category_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    items_image_idx: index('items_image_idx').on(columns.image),
    items_category_idx: index('items_category_idx').on(columns.category),
    items_updated_at_idx: index('items_updated_at_idx').on(columns.updatedAt),
    items_created_at_idx: index('items_created_at_idx').on(columns.createdAt),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_name_idx: uniqueIndex('categories_name_idx').on(columns.name),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const orders_items = pgTable(
  'orders_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    item: integer('item_id')
      .notNull()
      .references(() => items.id, {
        onDelete: 'set null',
      }),
    quantity: numeric('quantity').notNull(),
  },
  (columns) => ({
    _orderIdx: index('orders_items_order_idx').on(columns._order),
    _parentIDIdx: index('orders_items_parent_id_idx').on(columns._parentID),
    orders_items_item_idx: index('orders_items_item_idx').on(columns.item),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders = pgTable(
  'orders',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    coupon: integer('coupon_id').references(() => coupons.id, {
      onDelete: 'set null',
    }),
    discountAmount: numeric('discount_amount').default('0'),
    userAgent: varchar('user_agent'),
    deviceType: enum_orders_device_type('device_type'),
    customerName: varchar('customer_name').notNull(),
    customerEmail: varchar('customer_email').notNull(),
    customerNumber: varchar('customer_number').notNull(),
    paymentMethod: enum_orders_payment_method('payment_method').notNull().default('cod'),
    paymentSenderNumber: varchar('payment_sender_number'),
    paymentTransactionId: varchar('payment_transaction_id'),
    status: enum_orders_status('status').notNull().default('pending'),
    totalAmount: numeric('total_amount').notNull(),
    subtotal: numeric('subtotal').notNull(),
    shippingCharge: numeric('shipping_charge').notNull(),
    deliveryZone: enum_orders_delivery_zone('delivery_zone').notNull().default('inside_dhaka'),
    freeDeliveryApplied: boolean('free_delivery_applied').default(false),
    orderDate: timestamp('order_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    shippingAddress_line1: varchar('shipping_address_line1').notNull(),
    shippingAddress_line2: varchar('shipping_address_line2'),
    shippingAddress_city: varchar('shipping_address_city').notNull(),
    shippingAddress_state: varchar('shipping_address_state'),
    shippingAddress_postalCode: varchar('shipping_address_postal_code').notNull(),
    shippingAddress_country: varchar('shipping_address_country'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_user_idx: index('orders_user_idx').on(columns.user),
    orders_coupon_idx: index('orders_coupon_idx').on(columns.coupon),
    orders_updated_at_idx: index('orders_updated_at_idx').on(columns.updatedAt),
    orders_created_at_idx: index('orders_created_at_idx').on(columns.createdAt),
  }),
)

export const reviews = pgTable(
  'reviews',
  {
    id: serial('id').primaryKey(),
    item: integer('item_id')
      .notNull()
      .references(() => items.id, {
        onDelete: 'set null',
      }),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    reviewerName: varchar('reviewer_name'),
    rating: numeric('rating').notNull(),
    title: varchar('title'),
    comment: varchar('comment').notNull(),
    approved: boolean('approved').notNull().default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    reviews_item_idx: index('reviews_item_idx').on(columns.item),
    reviews_user_idx: index('reviews_user_idx').on(columns.user),
    reviews_updated_at_idx: index('reviews_updated_at_idx').on(columns.updatedAt),
    reviews_created_at_idx: index('reviews_created_at_idx').on(columns.createdAt),
  }),
)

export const abandoned_carts_items = pgTable(
  'abandoned_carts_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    item: integer('item_id')
      .notNull()
      .references(() => items.id, {
        onDelete: 'set null',
      }),
    quantity: numeric('quantity').notNull(),
  },
  (columns) => ({
    _orderIdx: index('abandoned_carts_items_order_idx').on(columns._order),
    _parentIDIdx: index('abandoned_carts_items_parent_id_idx').on(columns._parentID),
    abandoned_carts_items_item_idx: index('abandoned_carts_items_item_idx').on(columns.item),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [abandoned_carts.id],
      name: 'abandoned_carts_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const abandoned_carts = pgTable(
  'abandoned_carts',
  {
    id: serial('id').primaryKey(),
    sessionId: varchar('session_id').notNull(),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    customerName: varchar('customer_name'),
    customerEmail: varchar('customer_email'),
    customerNumber: varchar('customer_number'),
    cartTotal: numeric('cart_total'),
    status: enum_abandoned_carts_status('status').notNull().default('active'),
    reminderStage: numeric('reminder_stage').default('0'),
    lastActivityAt: timestamp('last_activity_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    recoveredOrder: integer('recovered_order_id').references(() => orders.id, {
      onDelete: 'set null',
    }),
    recoveryEmailSentAt: timestamp('recovery_email_sent_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    abandoned_carts_user_idx: index('abandoned_carts_user_idx').on(columns.user),
    abandoned_carts_recovered_order_idx: index('abandoned_carts_recovered_order_idx').on(
      columns.recoveredOrder,
    ),
    abandoned_carts_updated_at_idx: index('abandoned_carts_updated_at_idx').on(columns.updatedAt),
    abandoned_carts_created_at_idx: index('abandoned_carts_created_at_idx').on(columns.createdAt),
  }),
)

export const delivery_settings = pgTable(
  'delivery_settings',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull().default('Default Delivery Settings'),
    insideDhakaCharge: numeric('inside_dhaka_charge').notNull().default('80'),
    outsideDhakaCharge: numeric('outside_dhaka_charge').notNull().default('120'),
    freeDeliveryThreshold: numeric('free_delivery_threshold').notNull().default('2000'),
    digitalPaymentDeliveryCharge: numeric('digital_payment_delivery_charge')
      .notNull()
      .default('20'),
    shippingHighlightTitle: varchar('shipping_highlight_title')
      .notNull()
      .default('Free shipping on orders over 2000 taka'),
    shippingHighlightSubtitle: varchar('shipping_highlight_subtitle')
      .notNull()
      .default('Digital wallet payments have a flat Tk 20 delivery charge.'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    delivery_settings_updated_at_idx: index('delivery_settings_updated_at_idx').on(
      columns.updatedAt,
    ),
    delivery_settings_created_at_idx: index('delivery_settings_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    author: integer('author_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    publishedDate: timestamp('published_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    category: integer('category_id')
      .notNull()
      .references(() => categories.id, {
        onDelete: 'set null',
      }),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    excerpt: varchar('excerpt'),
    status: enum_posts_status('status').notNull().default('draft'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_slug_idx: uniqueIndex('posts_slug_idx').on(columns.slug),
    posts_author_idx: index('posts_author_idx').on(columns.author),
    posts_category_idx: index('posts_category_idx').on(columns.category),
    posts_featured_image_idx: index('posts_featured_image_idx').on(columns.featuredImage),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
  }),
)

export const program_participants = pgTable(
  'program_participants',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    phone: varchar('phone').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    program_participants_updated_at_idx: index('program_participants_updated_at_idx').on(
      columns.updatedAt,
    ),
    program_participants_created_at_idx: index('program_participants_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const coupons = pgTable(
  'coupons',
  {
    id: serial('id').primaryKey(),
    code: varchar('code').notNull(),
    discountType: enum_coupons_discount_type('discount_type').notNull().default('percent'),
    discountValue: numeric('discount_value').notNull(),
    expiryDate: timestamp('expiry_date', { mode: 'string', withTimezone: true, precision: 3 }),
    isActive: boolean('is_active').notNull().default(true),
    usageLimit: numeric('usage_limit').default('0'),
    usedCount: numeric('used_count').default('0'),
    applicableTo: enum_coupons_applicable_to('applicable_to').notNull().default('all'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    coupons_code_idx: uniqueIndex('coupons_code_idx').on(columns.code),
    coupons_updated_at_idx: index('coupons_updated_at_idx').on(columns.updatedAt),
    coupons_created_at_idx: index('coupons_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    itemsID: integer('items_id'),
    categoriesID: integer('categories_id'),
    ordersID: integer('orders_id'),
    reviewsID: integer('reviews_id'),
    'abandoned-cartsID': integer('abandoned_carts_id'),
    'delivery-settingsID': integer('delivery_settings_id'),
    postsID: integer('posts_id'),
    'program-participantsID': integer('program_participants_id'),
    couponsID: integer('coupons_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_items_id_idx: index(
      'payload_locked_documents_rels_items_id_idx',
    ).on(columns.itemsID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_orders_id_idx: index(
      'payload_locked_documents_rels_orders_id_idx',
    ).on(columns.ordersID),
    payload_locked_documents_rels_reviews_id_idx: index(
      'payload_locked_documents_rels_reviews_id_idx',
    ).on(columns.reviewsID),
    payload_locked_documents_rels_abandoned_carts_id_idx: index(
      'payload_locked_documents_rels_abandoned_carts_id_idx',
    ).on(columns['abandoned-cartsID']),
    payload_locked_documents_rels_delivery_settings_id_idx: index(
      'payload_locked_documents_rels_delivery_settings_id_idx',
    ).on(columns['delivery-settingsID']),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_program_participants_id_idx: index(
      'payload_locked_documents_rels_program_participants_id_idx',
    ).on(columns['program-participantsID']),
    payload_locked_documents_rels_coupons_id_idx: index(
      'payload_locked_documents_rels_coupons_id_idx',
    ).on(columns.couponsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    itemsIdFk: foreignKey({
      columns: [columns['itemsID']],
      foreignColumns: [items.id],
      name: 'payload_locked_documents_rels_items_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    reviewsIdFk: foreignKey({
      columns: [columns['reviewsID']],
      foreignColumns: [reviews.id],
      name: 'payload_locked_documents_rels_reviews_fk',
    }).onDelete('cascade'),
    'abandoned-cartsIdFk': foreignKey({
      columns: [columns['abandoned-cartsID']],
      foreignColumns: [abandoned_carts.id],
      name: 'payload_locked_documents_rels_abandoned_carts_fk',
    }).onDelete('cascade'),
    'delivery-settingsIdFk': foreignKey({
      columns: [columns['delivery-settingsID']],
      foreignColumns: [delivery_settings.id],
      name: 'payload_locked_documents_rels_delivery_settings_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    'program-participantsIdFk': foreignKey({
      columns: [columns['program-participantsID']],
      foreignColumns: [program_participants.id],
      name: 'payload_locked_documents_rels_program_participants_fk',
    }).onDelete('cascade'),
    couponsIdFk: foreignKey({
      columns: [columns['couponsID']],
      foreignColumns: [coupons.id],
      name: 'payload_locked_documents_rels_coupons_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_items = relations(items, ({ one }) => ({
  image: one(media, {
    fields: [items.image],
    references: [media.id],
    relationName: 'image',
  }),
  category: one(categories, {
    fields: [items.category],
    references: [categories.id],
    relationName: 'category',
  }),
}))
export const relations_categories = relations(categories, () => ({}))
export const relations_orders_items = relations(orders_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_items._parentID],
    references: [orders.id],
    relationName: 'items',
  }),
  item: one(items, {
    fields: [orders_items.item],
    references: [items.id],
    relationName: 'item',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  user: one(users, {
    fields: [orders.user],
    references: [users.id],
    relationName: 'user',
  }),
  coupon: one(coupons, {
    fields: [orders.coupon],
    references: [coupons.id],
    relationName: 'coupon',
  }),
  items: many(orders_items, {
    relationName: 'items',
  }),
}))
export const relations_reviews = relations(reviews, ({ one }) => ({
  item: one(items, {
    fields: [reviews.item],
    references: [items.id],
    relationName: 'item',
  }),
  user: one(users, {
    fields: [reviews.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_abandoned_carts_items = relations(abandoned_carts_items, ({ one }) => ({
  _parentID: one(abandoned_carts, {
    fields: [abandoned_carts_items._parentID],
    references: [abandoned_carts.id],
    relationName: 'items',
  }),
  item: one(items, {
    fields: [abandoned_carts_items.item],
    references: [items.id],
    relationName: 'item',
  }),
}))
export const relations_abandoned_carts = relations(abandoned_carts, ({ one, many }) => ({
  user: one(users, {
    fields: [abandoned_carts.user],
    references: [users.id],
    relationName: 'user',
  }),
  items: many(abandoned_carts_items, {
    relationName: 'items',
  }),
  recoveredOrder: one(orders, {
    fields: [abandoned_carts.recoveredOrder],
    references: [orders.id],
    relationName: 'recoveredOrder',
  }),
}))
export const relations_delivery_settings = relations(delivery_settings, () => ({}))
export const relations_posts = relations(posts, ({ one }) => ({
  author: one(users, {
    fields: [posts.author],
    references: [users.id],
    relationName: 'author',
  }),
  category: one(categories, {
    fields: [posts.category],
    references: [categories.id],
    relationName: 'category',
  }),
  featuredImage: one(media, {
    fields: [posts.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
}))
export const relations_program_participants = relations(program_participants, () => ({}))
export const relations_coupons = relations(coupons, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    itemsID: one(items, {
      fields: [payload_locked_documents_rels.itemsID],
      references: [items.id],
      relationName: 'items',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    reviewsID: one(reviews, {
      fields: [payload_locked_documents_rels.reviewsID],
      references: [reviews.id],
      relationName: 'reviews',
    }),
    'abandoned-cartsID': one(abandoned_carts, {
      fields: [payload_locked_documents_rels['abandoned-cartsID']],
      references: [abandoned_carts.id],
      relationName: 'abandoned-carts',
    }),
    'delivery-settingsID': one(delivery_settings, {
      fields: [payload_locked_documents_rels['delivery-settingsID']],
      references: [delivery_settings.id],
      relationName: 'delivery-settings',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    'program-participantsID': one(program_participants, {
      fields: [payload_locked_documents_rels['program-participantsID']],
      references: [program_participants.id],
      relationName: 'program-participants',
    }),
    couponsID: one(coupons, {
      fields: [payload_locked_documents_rels.couponsID],
      references: [coupons.id],
      relationName: 'coupons',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_users_delivery_zone: typeof enum_users_delivery_zone
  enum_users_role: typeof enum_users_role
  enum_orders_device_type: typeof enum_orders_device_type
  enum_orders_payment_method: typeof enum_orders_payment_method
  enum_orders_status: typeof enum_orders_status
  enum_orders_delivery_zone: typeof enum_orders_delivery_zone
  enum_abandoned_carts_status: typeof enum_abandoned_carts_status
  enum_posts_status: typeof enum_posts_status
  enum_coupons_discount_type: typeof enum_coupons_discount_type
  enum_coupons_applicable_to: typeof enum_coupons_applicable_to
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  items: typeof items
  categories: typeof categories
  orders_items: typeof orders_items
  orders: typeof orders
  reviews: typeof reviews
  abandoned_carts_items: typeof abandoned_carts_items
  abandoned_carts: typeof abandoned_carts
  delivery_settings: typeof delivery_settings
  posts: typeof posts
  program_participants: typeof program_participants
  coupons: typeof coupons
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_items: typeof relations_items
  relations_categories: typeof relations_categories
  relations_orders_items: typeof relations_orders_items
  relations_orders: typeof relations_orders
  relations_reviews: typeof relations_reviews
  relations_abandoned_carts_items: typeof relations_abandoned_carts_items
  relations_abandoned_carts: typeof relations_abandoned_carts
  relations_delivery_settings: typeof relations_delivery_settings
  relations_posts: typeof relations_posts
  relations_program_participants: typeof relations_program_participants
  relations_coupons: typeof relations_coupons
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-vercel-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
